// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Marain.Workflows.Api.Specs.EngineHost
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Cloud Event Publishing")]
    [NUnit.Framework.CategoryAttribute("perFeatureContainer")]
    [NUnit.Framework.CategoryAttribute("useWorkflowEngineApi")]
    [NUnit.Framework.CategoryAttribute("useTransientTenant")]
    [NUnit.Framework.CategoryAttribute("useChildObjects")]
    public partial class CloudEventPublishingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "perFeatureContainer",
                "useWorkflowEngineApi",
                "useTransientTenant",
                "useChildObjects"};
        
#line 1 "CloudEventPublishing.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EngineHost", "Cloud Event Publishing", "\tIn order to react to changes on workflow instances\r\n\tAs an external service\r\n\tI " +
                    "want to subscribe to events from the workflow engine", ProgrammingLanguage.CSharp, new string[] {
                        "perFeatureContainer",
                        "useWorkflowEngineApi",
                        "useTransientTenant",
                        "useChildObjects"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscriber receives event when a workflow instance is created")]
        public virtual void SubscriberReceivesEventWhenAWorkflowInstanceIsCreated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscriber receives event when a workflow instance is created", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExternalUrl",
                            "MsiAuthenticationResource"});
                table5.AddRow(new string[] {
                            "http://localhost:7454",
                            ""});
#line 12
 testRunner.Given("I have added the workflow \'SimpleExpensesWorkflow\' to the workflow store with Id " +
                        "\'simple-expenses-workflow-1\' and event subscriptions", ((string)(null)), table5, "Given ");
#line hidden
#line 15
 testRunner.And("there is an event subscriber listening on port \'7454\' called \'Subscriber\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("The workflow instance store is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table6.AddRow(new string[] {
                            "Claimant",
                            "J George"});
                table6.AddRow(new string[] {
                            "CostCenter",
                            "GD3724"});
#line 17
 testRunner.And("I have a dictionary called \'context\'", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "WorkflowId",
                            "WorkflowInstanceId",
                            "Context"});
                table7.AddRow(new string[] {
                            "simple-expenses-workflow-1",
                            "instance",
                            "{context}"});
#line 21
 testRunner.And("I have an object of type \'application/vnd.marain.workflows.hosted.startworkflowin" +
                        "stancerequest\' called \'request\'", ((string)(null)), table7, "And ");
#line hidden
#line 24
 testRunner.When("I post the object called \'request\' to the workflow engine path \'/{tenantId}/marai" +
                        "n/workflow/engine/workflowinstances\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("I should have received a 201 status code from the HTTP request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("there should be a workflow instance with the id \'instance\' in the workflow instan" +
                        "ce store", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table8.AddRow(new string[] {
                            "0",
                            "source",
                            "azuresubscriptionid.workflowresourcegroupname.{tenantId}"});
                table8.AddRow(new string[] {
                            "0",
                            "specversion",
                            "1.0"});
                table8.AddRow(new string[] {
                            "0",
                            "subject",
                            "instance"});
                table8.AddRow(new string[] {
                            "0",
                            "type",
                            "io.marain.workflow.instance.created"});
                table8.AddRow(new string[] {
                            "0",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table8.AddRow(new string[] {
                            "0",
                            "maraintenantid",
                            "{tenantId}"});
                table8.AddRow(new string[] {
                            "0",
                            "data.newState",
                            "waiting-for-submission"});
                table8.AddRow(new string[] {
                            "0",
                            "data.newStatus",
                            "waiting"});
                table8.AddRow(new string[] {
                            "0",
                            "data.suppliedContext.Claimant",
                            "J George"});
                table8.AddRow(new string[] {
                            "0",
                            "data.suppliedContext.CostCenter",
                            "GD3724"});
                table8.AddRow(new string[] {
                            "0",
                            "data.newContext.Claimant",
                            "J George"});
                table8.AddRow(new string[] {
                            "0",
                            "data.newContext.CostCenter",
                            "GD3724"});
#line 27
 testRunner.And("a CloudEvent should have been published to the subscriber called \'Subscriber\'", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single subscriber receives event when workflow state changes")]
        public virtual void SingleSubscriberReceivesEventWhenWorkflowStateChanges()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single subscriber receives event when workflow state changes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExternalUrl",
                            "MsiAuthenticationResource"});
                table9.AddRow(new string[] {
                            "http://localhost:7454",
                            ""});
#line 43
 testRunner.Given("I have added the workflow \'SimpleExpensesWorkflow\' to the workflow store with Id " +
                        "\'simple-expenses-workflow-2\' and event subscriptions", ((string)(null)), table9, "Given ");
#line hidden
#line 46
 testRunner.And("there is an event subscriber listening on port \'7454\' called \'Subscriber\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("The workflow instance store is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table10.AddRow(new string[] {
                            "Claimant",
                            "J George"});
                table10.AddRow(new string[] {
                            "CostCenter",
                            "GD3724"});
#line 48
 testRunner.And("I have a dictionary called \'context\'", ((string)(null)), table10, "And ");
#line hidden
#line 52
 testRunner.And("I have started an instance of the workflow \'simple-expenses-workflow-2\' with inst" +
                        "ance id \'instance\' and using context object \'context\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "TriggerName"});
                table11.AddRow(new string[] {
                            "Submit"});
#line 53
 testRunner.And("I have an object of type \'application/vnd.marain.workflows.hosted.trigger\' called" +
                        " \'trigger\'", ((string)(null)), table11, "And ");
#line hidden
#line 56
 testRunner.When("I post the object called \'trigger\' to the workflow engine path \'/{tenantId}/marai" +
                        "n/workflow/engine/workflowinstances/instance/triggers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("I should have received a 200 status code from the HTTP request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.And("the workflow instance with id \'instance\' should be in the state with name \'Waitin" +
                        "g for approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table12.AddRow(new string[] {
                            "1",
                            "source",
                            "azuresubscriptionid.workflowresourcegroupname.{tenantId}"});
                table12.AddRow(new string[] {
                            "1",
                            "specversion",
                            "1.0"});
                table12.AddRow(new string[] {
                            "1",
                            "subject",
                            "instance"});
                table12.AddRow(new string[] {
                            "1",
                            "type",
                            "io.marain.workflow.instance.transition-completed"});
                table12.AddRow(new string[] {
                            "1",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.transitioncloudeventdata"});
                table12.AddRow(new string[] {
                            "1",
                            "maraintenantid",
                            "{tenantId}"});
                table12.AddRow(new string[] {
                            "1",
                            "data.previousState",
                            "waiting-for-submission"});
                table12.AddRow(new string[] {
                            "1",
                            "data.previousStatus",
                            "waiting"});
                table12.AddRow(new string[] {
                            "1",
                            "data.newState",
                            "waiting-for-approval"});
                table12.AddRow(new string[] {
                            "1",
                            "data.newStatus",
                            "waiting"});
                table12.AddRow(new string[] {
                            "1",
                            "data.transitionId",
                            "submit"});
                table12.AddRow(new string[] {
                            "1",
                            "data.previousContext.Claimant",
                            "J George"});
                table12.AddRow(new string[] {
                            "1",
                            "data.previousContext.CostCenter",
                            "GD3724"});
                table12.AddRow(new string[] {
                            "1",
                            "data.newContext.Claimant",
                            "J George"});
                table12.AddRow(new string[] {
                            "1",
                            "data.newContext.CostCenter",
                            "GD3724"});
#line 59
 testRunner.And("CloudEvents should have been published to the subscriber called \'Subscriber\'", ((string)(null)), table12, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple subscribers receive event when workflow state changes")]
        public virtual void MultipleSubscribersReceiveEventWhenWorkflowStateChanges()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple subscribers receive event when workflow state changes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExternalUrl",
                            "MsiAuthenticationResource"});
                table13.AddRow(new string[] {
                            "http://localhost:7454",
                            ""});
                table13.AddRow(new string[] {
                            "http://localhost:7455",
                            ""});
                table13.AddRow(new string[] {
                            "http://localhost:7456",
                            ""});
#line 78
 testRunner.Given("I have added the workflow \'SimpleExpensesWorkflow\' to the workflow store with Id " +
                        "\'simple-expenses-workflow-3\' and event subscriptions", ((string)(null)), table13, "Given ");
#line hidden
#line 83
 testRunner.And("there is an event subscriber listening on port \'7454\' called \'Subscriber1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("there is an event subscriber listening on port \'7455\' called \'Subscriber2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.And("there is an event subscriber listening on port \'7456\' called \'Subscriber3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("The workflow instance store is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table14.AddRow(new string[] {
                            "Claimant",
                            "J George"});
                table14.AddRow(new string[] {
                            "CostCenter",
                            "GD3724"});
#line 87
 testRunner.And("I have a dictionary called \'context\'", ((string)(null)), table14, "And ");
#line hidden
#line 91
 testRunner.And("I have started an instance of the workflow \'simple-expenses-workflow-3\' with inst" +
                        "ance id \'instance\' and using context object \'context\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "TriggerName"});
                table15.AddRow(new string[] {
                            "Submit"});
#line 92
 testRunner.And("I have an object of type \'application/vnd.marain.workflows.hosted.trigger\' called" +
                        " \'trigger\'", ((string)(null)), table15, "And ");
#line hidden
#line 95
 testRunner.When("I post the object called \'trigger\' to the workflow engine path \'/{tenantId}/marai" +
                        "n/workflow/engine/workflowinstances/instance/triggers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
 testRunner.Then("I should have received a 200 status code from the HTTP request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.And("the workflow instance with id \'instance\' should be in the state with name \'Waitin" +
                        "g for approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table16.AddRow(new string[] {
                            "1",
                            "subject",
                            "instance"});
                table16.AddRow(new string[] {
                            "1",
                            "type",
                            "io.marain.workflow.instance.transition-completed"});
#line 98
 testRunner.And("CloudEvents should have been published to the subscriber called \'Subscriber1\'", ((string)(null)), table16, "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table17.AddRow(new string[] {
                            "1",
                            "subject",
                            "instance"});
                table17.AddRow(new string[] {
                            "1",
                            "type",
                            "io.marain.workflow.instance.transition-completed"});
#line 102
 testRunner.And("CloudEvents should have been published to the subscriber called \'Subscriber2\'", ((string)(null)), table17, "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table18.AddRow(new string[] {
                            "1",
                            "subject",
                            "instance"});
                table18.AddRow(new string[] {
                            "1",
                            "type",
                            "io.marain.workflow.instance.transition-completed"});
#line 106
 testRunner.And("CloudEvents should have been published to the subscriber called \'Subscriber3\'", ((string)(null)), table18, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Workflow instance is not faulted if a subscriber does not return a success status" +
            " code on publishing")]
        public virtual void WorkflowInstanceIsNotFaultedIfASubscriberDoesNotReturnASuccessStatusCodeOnPublishing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow instance is not faulted if a subscriber does not return a success status" +
                    " code on publishing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExternalUrl",
                            "MsiAuthenticationResource"});
                table19.AddRow(new string[] {
                            "http://localhost:7454",
                            ""});
#line 112
 testRunner.Given("I have added the workflow \'SimpleExpensesWorkflow\' to the workflow store with Id " +
                        "\'simple-expenses-workflow-4\' and event subscriptions", ((string)(null)), table19, "Given ");
#line hidden
#line 115
 testRunner.And("there is an event subscriber that will return the status \'InternalServerError\' li" +
                        "stening on port \'7454\' called \'Subscriber\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("The workflow instance store is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table20.AddRow(new string[] {
                            "Claimant",
                            "J George"});
                table20.AddRow(new string[] {
                            "CostCenter",
                            "GD3724"});
#line 117
 testRunner.And("I have a dictionary called \'context\'", ((string)(null)), table20, "And ");
#line hidden
#line 121
 testRunner.And("I have started an instance of the workflow \'simple-expenses-workflow-4\' with inst" +
                        "ance id \'instance\' and using context object \'context\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "TriggerName"});
                table21.AddRow(new string[] {
                            "Submit"});
#line 122
 testRunner.And("I have an object of type \'application/vnd.marain.workflows.hosted.trigger\' called" +
                        " \'trigger\'", ((string)(null)), table21, "And ");
#line hidden
#line 125
 testRunner.When("I post the object called \'trigger\' to the workflow engine path \'/{tenantId}/marai" +
                        "n/workflow/engine/workflowinstances/instance/triggers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
 testRunner.Then("I should have received a 200 status code from the HTTP request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
 testRunner.And("the workflow instance with id \'instance\' should be in the state with name \'Waitin" +
                        "g for approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.And("the workflow instance with id \'instance\' should have the status \'Waiting\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table22.AddRow(new string[] {
                            "0",
                            "subject",
                            "instance"});
#line 129
 testRunner.And("CloudEvents should have been published to the subscriber called \'Subscriber\'", ((string)(null)), table22, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("If one subscriber fails, other subscribers still receive the event")]
        public virtual void IfOneSubscriberFailsOtherSubscribersStillReceiveTheEvent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If one subscriber fails, other subscribers still receive the event", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExternalUrl",
                            "MsiAuthenticationResource"});
                table23.AddRow(new string[] {
                            "http://localhost:7454",
                            ""});
                table23.AddRow(new string[] {
                            "http://localhost:7455",
                            ""});
                table23.AddRow(new string[] {
                            "http://localhost:7456",
                            ""});
#line 134
 testRunner.Given("I have added the workflow \'SimpleExpensesWorkflow\' to the workflow store with Id " +
                        "\'simple-expenses-workflow-5\' and event subscriptions", ((string)(null)), table23, "Given ");
#line hidden
#line 139
 testRunner.And("there is an event subscriber listening on port \'7454\' called \'Subscriber1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("there is an event subscriber that will return the status \'InternalServerError\' li" +
                        "stening on port \'7455\' called \'Subscriber2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And("there is an event subscriber listening on port \'7456\' called \'Subscriber3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.And("The workflow instance store is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table24.AddRow(new string[] {
                            "Claimant",
                            "J George"});
                table24.AddRow(new string[] {
                            "CostCenter",
                            "GD3724"});
#line 143
 testRunner.And("I have a dictionary called \'context\'", ((string)(null)), table24, "And ");
#line hidden
#line 147
 testRunner.And("I have started an instance of the workflow \'simple-expenses-workflow-5\' with inst" +
                        "ance id \'instance\' and using context object \'context\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "TriggerName"});
                table25.AddRow(new string[] {
                            "Submit"});
#line 148
 testRunner.And("I have an object of type \'application/vnd.marain.workflows.hosted.trigger\' called" +
                        " \'trigger\'", ((string)(null)), table25, "And ");
#line hidden
#line 151
 testRunner.When("I post the object called \'trigger\' to the workflow engine path \'/{tenantId}/marai" +
                        "n/workflow/engine/workflowinstances/instance/triggers\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
 testRunner.Then("I should have received a 200 status code from the HTTP request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
 testRunner.And("the workflow instance with id \'instance\' should be in the state with name \'Waitin" +
                        "g for approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
 testRunner.And("the workflow instance with id \'instance\' should have the status \'Waiting\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table26.AddRow(new string[] {
                            "1",
                            "subject",
                            "instance"});
                table26.AddRow(new string[] {
                            "1",
                            "type",
                            "io.marain.workflow.instance.transition-completed"});
#line 155
 testRunner.And("CloudEvents should have been published to the subscriber called \'Subscriber1\'", ((string)(null)), table26, "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table27.AddRow(new string[] {
                            "1",
                            "subject",
                            "instance"});
                table27.AddRow(new string[] {
                            "1",
                            "type",
                            "io.marain.workflow.instance.transition-completed"});
#line 159
 testRunner.And("CloudEvents should have been published to the subscriber called \'Subscriber3\'", ((string)(null)), table27, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cloud event publishing retries 10 times on failure")]
        public virtual void CloudEventPublishingRetries10TimesOnFailure()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cloud event publishing retries 10 times on failure", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "ExternalUrl",
                            "MsiAuthenticationResource"});
                table28.AddRow(new string[] {
                            "http://localhost:7454",
                            ""});
#line 165
 testRunner.Given("I have added the workflow \'SimpleExpensesWorkflow\' to the workflow store with Id " +
                        "\'simple-expenses-workflow-6\' and event subscriptions", ((string)(null)), table28, "Given ");
#line hidden
#line 168
 testRunner.And("there is an event subscriber that will return the status \'InternalServerError\' li" +
                        "stening on port \'7454\' called \'Subscriber\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
 testRunner.And("The workflow instance store is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table29.AddRow(new string[] {
                            "Claimant",
                            "J George"});
                table29.AddRow(new string[] {
                            "CostCenter",
                            "GD3724"});
#line 170
 testRunner.And("I have a dictionary called \'context\'", ((string)(null)), table29, "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "WorkflowId",
                            "WorkflowInstanceId",
                            "Context"});
                table30.AddRow(new string[] {
                            "simple-expenses-workflow-6",
                            "instance",
                            "{context}"});
#line 174
 testRunner.And("I have an object of type \'application/vnd.marain.workflows.hosted.startworkflowin" +
                        "stancerequest\' called \'request\'", ((string)(null)), table30, "And ");
#line hidden
#line 177
 testRunner.When("I post the object called \'request\' to the workflow engine path \'/{tenantId}/marai" +
                        "n/workflow/engine/workflowinstances\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
 testRunner.Then("I should have received a 201 status code from the HTTP request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 179
 testRunner.And("there should be a workflow instance with the id \'instance\' in the workflow instan" +
                        "ce store", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Index",
                            "PropertyPath",
                            "Value"});
                table31.AddRow(new string[] {
                            "0",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "0",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "1",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "1",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "2",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "2",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "3",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "3",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "4",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "4",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "5",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "5",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "6",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "6",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "7",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "7",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "8",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "8",
                            "subject",
                            "instance"});
                table31.AddRow(new string[] {
                            "9",
                            "datacontenttype",
                            "application/marain.workflows.workflowinstance.creationcloudeventdata"});
                table31.AddRow(new string[] {
                            "9",
                            "subject",
                            "instance"});
#line 180
 testRunner.And("CloudEvents should have been published to the subscriber called \'Subscriber\'", ((string)(null)), table31, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
