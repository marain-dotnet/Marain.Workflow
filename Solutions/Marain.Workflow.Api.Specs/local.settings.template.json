{
  "LeasingStorageAccountConnectionString": "UseDevelopmentStorage=true",

  // If running with a local tenancy service, point TenancyClient:TenancyServiceBaseUri at the localhost address for that
  // and set the ResourceIdForMsiAuthentication to an empty string.
  "TenancyClient:TenancyServiceBaseUri": "https://mardevtenancy.azurewebsites.net/",
  "TenancyClient:ResourceIdForMsiAuthentication": "e7281b1b-6540-4c1b-ac18-eb0c2d42bfbf",

  // If running with a local operations service, point Operations:ControlServiceBaseUrl at the localhost address for that
  // and set the ResourceIdForMsiAuthentication to an empty string.
  "Operations:ControlServiceBaseUrl": "https://mardevoperationscontrol.azurewebsites.net/",
  "Operations:ResourceIdForMsiAuthentication": "c32e9a16-c008-48c7-8518-327e7a14dc4a",

  // Blob storage configuration for Operations and workflow definitions during testing.
  // Remove this to use local storage emulator.
  "TestBlobStorageConfiguration:AccountName": "endteststorage",
  "TestBlobStorageConfiguration:AccountKeySecretName": "endteststorage",
  "TestBlobStorageConfiguration:KeyVaultName": "endjintest",
  // Note that the Operations services will need to have access to the key
  // vault specified. Alternatively, set just this to use a connection string.
  //"TestBlobStorageConfiguration:AccountName": "<Storage Account Connection String Here>",

  // CosmosDb configuration for testing.
  // Remove these to use the local storage emulator.
  "TestCosmosConfiguration:AccountUri": "https://endjintestsql.documents.azure.com/",
  "TestCosmosConfiguration:AccountKeySecretName": "endjintestsql",
  "TestCosmosConfiguration:KeyVaultName": "endjintest",
  "TestCosmosConfiguration:DisableTenantIdPrefix": "true"

  // If any of the TenancyClient, Operations, TestBlobStorageConfiguration or TestCosmosConfguration are set to point at
  // resources in Azure, this local service will need to authenticate. And for that to work, you won't be able to use the
  // normal az cli-based AzureServicesAuthConnectionString (because az cli is only able to obtain tokens for a fixed set of
  // known Microsoft resource; it can't be used to obtain tokens for arbitrary applications that we've defined). Instead,
  // you'll need to create a suitable service principle in AAD, grant that service principle access to the tenancy service, and
  // set up the credentials like this instead of the setting above:
  //  "AzureServicesAuthConnectionString": "RunAs=App;AppId=AppIdForYourServicePrinciple;TenantId=0f621c67-98a0-4ed5-b5bd-31a35be41e29;AppKey=YourAppSecretHere"
}