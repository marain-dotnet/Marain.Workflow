// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Marain.Workflows.Specs.Features.Core
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Workflow Instance")]
    [NUnit.Framework.CategoryAttribute("useChildObjects")]
    [NUnit.Framework.CategoryAttribute("perScenarioContainer")]
    public partial class WorkflowInstanceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "useChildObjects",
                "perScenarioContainer"};
        
#line 1 "WorkflowInstance.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Core", "Workflow Instance", "\tIn order to track progress of items through a workflow\r\n\tAs a developer\r\n\tI want" +
                    " a workflow instance entity to hold that progress", ProgrammingLanguage.CSharp, new string[] {
                        "useChildObjects",
                        "perScenarioContainer"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line hidden
#line 10
 testRunner.Given("I have a data catalog workflow definition with Id \'workflow1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "Context1",
                        "Value1"});
#line 11
 testRunner.And("I have a context dictionary called \'Context1\':", ((string)(null)), table1, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new workflow instance for a workflow")]
        public virtual void CreateANewWorkflowInstanceForAWorkflow()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new workflow instance for a workflow", null, tagsOfScenario, argumentsOfScenario);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table2.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 16
 testRunner.When("I create a new workflow instance", ((string)(null)), table2, "When ");
#line hidden
#line 19
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table3.AddRow(new string[] {
                            "Id",
                            "instance1"});
                table3.AddRow(new string[] {
                            "Status",
                            "Initializing"});
                table3.AddRow(new string[] {
                            "StateId",
                            ""});
                table3.AddRow(new string[] {
                            "WorkflowId",
                            "workflow1"});
                table3.AddRow(new string[] {
                            "Context",
                            "{Context1}"});
                table3.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 20
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("IsDirty flag is false when there are no uncommitted events")]
        public virtual void IsDirtyFlagIsFalseWhenThereAreNoUncommittedEvents()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IsDirty flag is false when there are no uncommitted events", null, tagsOfScenario, argumentsOfScenario);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table4.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 30
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table4, "Given ");
#line hidden
#line 33
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table5.AddRow(new string[] {
                            "IsDirty",
                            "false"});
#line 35
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot start a transition when the workflow instance is still Initializing")]
        public virtual void CannotStartATransitionWhenTheWorkflowInstanceIsStillInitializing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot start a transition when the workflow instance is still Initializing", null, tagsOfScenario, argumentsOfScenario);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table6.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 40
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table7.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 43
 testRunner.When("I start the transition \'create\' for the workflow instance with Id \'instance1\' a t" +
                        "rigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigger\'", ((string)(null)), table7, "When ");
#line hidden
#line 46
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Faulting the workflow when it is initializing")]
        public virtual void FaultingTheWorkflowWhenItIsInitializing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Faulting the workflow when it is initializing", null, tagsOfScenario, argumentsOfScenario);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table8.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 49
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table8, "Given ");
#line hidden
#line 52
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table9.AddRow(new string[] {
                            "Item1",
                            "Data 1"});
                table9.AddRow(new string[] {
                            "Item2",
                            "Data 2"});
#line 53
 testRunner.When("I set the workflow instance with Id \'instance1\' as faulted with the message \'Inte" +
                        "ntional fault\' and data", ((string)(null)), table9, "When ");
#line hidden
#line 57
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table10.AddRow(new string[] {
                            "Id",
                            "instance1"});
                table10.AddRow(new string[] {
                            "Status",
                            "Faulted"});
                table10.AddRow(new string[] {
                            "StateId",
                            ""});
                table10.AddRow(new string[] {
                            "WorkflowId",
                            "workflow1"});
                table10.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 58
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Completing initialization by entering the initial state")]
        public virtual void CompletingInitializationByEnteringTheInitialState()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Completing initialization by entering the initial state", null, tagsOfScenario, argumentsOfScenario);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table11.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 67
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table12.AddRow(new string[] {
                            "AddOrUpdate",
                            "Item1",
                            "Updated Data 1"});
                table12.AddRow(new string[] {
                            "AddOrUpdate",
                            "Item3",
                            "Data 3"});
                table12.AddRow(new string[] {
                            "Remove",
                            "Item2",
                            ""});
#line 70
 testRunner.When("I set the workflow instance Id \'instance1\' as having entered the state \'waiting-f" +
                        "or-documentation\' with the following context updates:", ((string)(null)), table12, "When ");
#line hidden
#line 75
 testRunner.Then("the workflow instance with Id \'instance1\' should have 2 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table13.AddRow(new string[] {
                            "Id",
                            "instance1"});
                table13.AddRow(new string[] {
                            "Status",
                            "Waiting"});
                table13.AddRow(new string[] {
                            "StateId",
                            "waiting-for-documentation"});
                table13.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 76
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table13, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Starting a transition when the workflow instance is Waiting")]
        public virtual void StartingATransitionWhenTheWorkflowInstanceIsWaiting()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Starting a transition when the workflow instance is Waiting", null, tagsOfScenario, argumentsOfScenario);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table14.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 84
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table14, "Given ");
#line hidden
#line 87
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'wait" +
                        "ing-for-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table15.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 89
 testRunner.When("I start the transition \'create\' for the workflow instance with Id \'instance1\' a t" +
                        "rigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigger\'", ((string)(null)), table15, "When ");
#line hidden
#line 92
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table16.AddRow(new string[] {
                            "Id",
                            "instance1"});
                table16.AddRow(new string[] {
                            "Status",
                            "ProcessingTransition"});
                table16.AddRow(new string[] {
                            "StateId",
                            "waiting-for-documentation"});
                table16.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 93
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table16, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot start a transition when a transition is already in progress")]
        public virtual void CannotStartATransitionWhenATransitionIsAlreadyInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot start a transition when a transition is already in progress", null, tagsOfScenario, argumentsOfScenario);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table17.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 101
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table17, "Given ");
#line hidden
#line 104
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'wait" +
                        "ing-for-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table18.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 105
 testRunner.And("I have started the transition \'create\' for the workflow instance with Id \'instanc" +
                        "e1\' a trigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigg" +
                        "er\'", ((string)(null)), table18, "And ");
#line hidden
#line 108
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table19.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 109
 testRunner.When("I start the transition \'create\' for the workflow instance with Id \'instance1\' a t" +
                        "rigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigger\'", ((string)(null)), table19, "When ");
#line hidden
#line 112
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot start a transition when a workflow is faulted")]
        public virtual void CannotStartATransitionWhenAWorkflowIsFaulted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot start a transition when a workflow is faulted", null, tagsOfScenario, argumentsOfScenario);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table20.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 116
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table20, "Given ");
#line hidden
#line 119
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'wait" +
                        "ing-for-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.And("I have set the workflow instance with Id \'instance1\' as faulted with the message " +
                        "\'Intentional fault\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table21.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 122
 testRunner.When("I start the transition \'create\' for the workflow instance with Id \'instance1\' a t" +
                        "rigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigger\'", ((string)(null)), table21, "When ");
#line hidden
#line 125
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot exit a state when a transition is not in progress")]
        public virtual void CannotExitAStateWhenATransitionIsNotInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot exit a state when a transition is not in progress", null, tagsOfScenario, argumentsOfScenario);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table22.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 129
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table22, "Given ");
#line hidden
#line 132
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'wait" +
                        "ing-for-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
 testRunner.When("I do the next thing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot enter a state when a transition is not in progress")]
        public virtual void CannotEnterAStateWhenATransitionIsNotInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot enter a state when a transition is not in progress", null, tagsOfScenario, argumentsOfScenario);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table23.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 136
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table23, "Given ");
#line hidden
#line 139
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'wait" +
                        "ing-for-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.When("I do the next thing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot record transition action results when a transition is not in progress")]
        public virtual void CannotRecordTransitionActionResultsWhenATransitionIsNotInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot record transition action results when a transition is not in progress", null, tagsOfScenario, argumentsOfScenario);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table24.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 143
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table24, "Given ");
#line hidden
#line 146
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'wait" +
                        "ing-for-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.When("I do the next thing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
