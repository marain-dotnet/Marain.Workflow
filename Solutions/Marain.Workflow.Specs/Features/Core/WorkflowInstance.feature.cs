// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Marain.Workflows.Specs.Features.Core
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Workflow Instance")]
    [NUnit.Framework.CategoryAttribute("useChildObjects")]
    [NUnit.Framework.CategoryAttribute("perScenarioContainer")]
    public partial class WorkflowInstanceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "useChildObjects",
                "perScenarioContainer"};
        
#line 1 "WorkflowInstance.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Core", "Workflow Instance", "\tIn order to track progress of items through a workflow\r\n\tAs a developer\r\n\tI want" +
                    " a workflow instance entity to hold that progress", ProgrammingLanguage.CSharp, new string[] {
                        "useChildObjects",
                        "perScenarioContainer"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line hidden
#line 10
 testRunner.Given("I have a data catalog workflow definition with Id \'workflow1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "Context1",
                        "Value1"});
            table1.AddRow(new string[] {
                        "Context2",
                        "Value2"});
#line 11
 testRunner.And("I have a context dictionary called \'Context1\':", ((string)(null)), table1, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new workflow instance for a workflow")]
        public virtual void CreateANewWorkflowInstanceForAWorkflow()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new workflow instance for a workflow", null, tagsOfScenario, argumentsOfScenario);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table2.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 17
 testRunner.When("I create a new workflow instance", ((string)(null)), table2, "When ");
#line hidden
#line 20
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table3.AddRow(new string[] {
                            "Id",
                            "instance1"});
                table3.AddRow(new string[] {
                            "Status",
                            "Initializing"});
                table3.AddRow(new string[] {
                            "StateId",
                            ""});
                table3.AddRow(new string[] {
                            "WorkflowId",
                            "workflow1"});
                table3.AddRow(new string[] {
                            "Context",
                            "{Context1}"});
                table3.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 21
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("IsDirty flag is false when there are no uncommitted events")]
        public virtual void IsDirtyFlagIsFalseWhenThereAreNoUncommittedEvents()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IsDirty flag is false when there are no uncommitted events", null, tagsOfScenario, argumentsOfScenario);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table4.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 31
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table4, "Given ");
#line hidden
#line 34
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table5.AddRow(new string[] {
                            "IsDirty",
                            "false"});
#line 36
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot start a transition when the workflow instance is still Initializing")]
        public virtual void CannotStartATransitionWhenTheWorkflowInstanceIsStillInitializing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot start a transition when the workflow instance is still Initializing", null, tagsOfScenario, argumentsOfScenario);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table6.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 41
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table7.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 44
 testRunner.When("I start the transition \'create\' for the workflow instance with Id \'instance1\' a t" +
                        "rigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigger\'", ((string)(null)), table7, "When ");
#line hidden
#line 47
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Faulting the workflow when it is initializing")]
        public virtual void FaultingTheWorkflowWhenItIsInitializing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Faulting the workflow when it is initializing", null, tagsOfScenario, argumentsOfScenario);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table8.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 50
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table8, "Given ");
#line hidden
#line 53
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table9.AddRow(new string[] {
                            "Item1",
                            "Data 1"});
                table9.AddRow(new string[] {
                            "Item2",
                            "Data 2"});
#line 54
 testRunner.When("I set the workflow instance with Id \'instance1\' as faulted with the message \'Inte" +
                        "ntional fault\' and data", ((string)(null)), table9, "When ");
#line hidden
#line 58
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table10.AddRow(new string[] {
                            "Id",
                            "instance1"});
                table10.AddRow(new string[] {
                            "Status",
                            "Faulted"});
                table10.AddRow(new string[] {
                            "StateId",
                            ""});
                table10.AddRow(new string[] {
                            "WorkflowId",
                            "workflow1"});
                table10.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 59
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot complete initialization by entering a state that is not the workflows init" +
            "ial state")]
        public virtual void CannotCompleteInitializationByEnteringAStateThatIsNotTheWorkflowsInitialState()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot complete initialization by entering a state that is not the workflows init" +
                    "ial state", null, tagsOfScenario, argumentsOfScenario);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table11.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 68
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table11, "Given ");
#line hidden
#line 71
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.When("I set the workflow instance Id \'instance1\' as having entered the state \'waiting-f" +
                        "or-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.And("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Completing initialization by entering the initial state")]
        public virtual void CompletingInitializationByEnteringTheInitialState()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Completing initialization by entering the initial state", null, tagsOfScenario, argumentsOfScenario);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table12.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 77
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table13.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Updated Value1"});
                table13.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context3",
                            "Value3"});
                table13.AddRow(new string[] {
                            "Remove",
                            "Context2",
                            ""});
#line 80
 testRunner.When("I set the workflow instance Id \'instance1\' as having entered the state \'initializ" +
                        "ing\' with the following context updates:", ((string)(null)), table13, "When ");
#line hidden
#line 85
 testRunner.Then("the workflow instance with Id \'instance1\' should have 2 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table14.AddRow(new string[] {
                            "Id",
                            "instance1"});
                table14.AddRow(new string[] {
                            "Status",
                            "Waiting"});
                table14.AddRow(new string[] {
                            "StateId",
                            "initializing"});
                table14.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 86
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table15.AddRow(new string[] {
                            "Context1",
                            "Updated Value1"});
                table15.AddRow(new string[] {
                            "Context3",
                            "Value3"});
#line 92
 testRunner.And("the workflow instance with Id \'instance1\' should have the following context:", ((string)(null)), table15, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Starting a transition when the workflow instance is Waiting")]
        public virtual void StartingATransitionWhenTheWorkflowInstanceIsWaiting()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Starting a transition when the workflow instance is Waiting", null, tagsOfScenario, argumentsOfScenario);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table16.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 98
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table16, "Given ");
#line hidden
#line 101
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table17.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 103
 testRunner.When("I start the transition \'create\' for the workflow instance with Id \'instance1\' a t" +
                        "rigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigger\'", ((string)(null)), table17, "When ");
#line hidden
#line 106
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table18.AddRow(new string[] {
                            "Id",
                            "instance1"});
                table18.AddRow(new string[] {
                            "Status",
                            "ProcessingTransition"});
                table18.AddRow(new string[] {
                            "StateId",
                            "initializing"});
                table18.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 107
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table18, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exit the current state when a transition is in progress")]
        public virtual void ExitTheCurrentStateWhenATransitionIsInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exit the current state when a transition is in progress", null, tagsOfScenario, argumentsOfScenario);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table19.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 115
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table19, "Given ");
#line hidden
#line 118
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table20.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 119
 testRunner.And("I have started the transition \'create\' for the workflow instance with Id \'instanc" +
                        "e1\' a trigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigg" +
                        "er\'", ((string)(null)), table20, "And ");
#line hidden
#line 122
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table21.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Updated Value1"});
#line 123
 testRunner.When("I set the workflow instance Id \'instance1\' as having exited the current state wit" +
                        "h the following context updates:", ((string)(null)), table21, "When ");
#line hidden
#line 126
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table22.AddRow(new string[] {
                            "Status",
                            "ProcessingTransition"});
                table22.AddRow(new string[] {
                            "StateId",
                            ""});
                table22.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 127
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table22, "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table23.AddRow(new string[] {
                            "Context1",
                            "Updated Value1"});
                table23.AddRow(new string[] {
                            "Context2",
                            "Value2"});
#line 132
 testRunner.And("the workflow instance with Id \'instance1\' should have the following context:", ((string)(null)), table23, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Record transition execution results when a transition is in progress and the prev" +
            "ious state has been exited")]
        public virtual void RecordTransitionExecutionResultsWhenATransitionIsInProgressAndThePreviousStateHasBeenExited()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record transition execution results when a transition is in progress and the prev" +
                    "ious state has been exited", null, tagsOfScenario, argumentsOfScenario);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table24.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 138
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table24, "Given ");
#line hidden
#line 141
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table25.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 142
 testRunner.And("I have started the transition \'create\' for the workflow instance with Id \'instanc" +
                        "e1\' a trigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigg" +
                        "er\'", ((string)(null)), table25, "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table26.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Value1.1"});
#line 145
 testRunner.And("I have set the workflow instance Id \'instance1\' as having exited the current stat" +
                        "e with the following context updates:", ((string)(null)), table26, "And ");
#line hidden
#line 148
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table27.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Value1.2"});
                table27.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context3",
                            "Value3"});
                table27.AddRow(new string[] {
                            "Remove",
                            "Context2",
                            ""});
#line 149
 testRunner.When("I set the workflow instance Id \'instance1\' as having executed transition actions " +
                        "with the following context updates:", ((string)(null)), table27, "When ");
#line hidden
#line 154
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table28.AddRow(new string[] {
                            "Status",
                            "ProcessingTransition"});
                table28.AddRow(new string[] {
                            "StateId",
                            ""});
                table28.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 155
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table28, "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table29.AddRow(new string[] {
                            "Context1",
                            "Value1.2"});
                table29.AddRow(new string[] {
                            "Context3",
                            "Value3"});
#line 160
 testRunner.And("the workflow instance with Id \'instance1\' should have the following context:", ((string)(null)), table29, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Enter a new state when a transition is in progress and the previous state has bee" +
            "n executed and transition actions recorded")]
        public virtual void EnterANewStateWhenATransitionIsInProgressAndThePreviousStateHasBeenExecutedAndTransitionActionsRecorded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enter a new state when a transition is in progress and the previous state has bee" +
                    "n executed and transition actions recorded", null, tagsOfScenario, argumentsOfScenario);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table30.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 166
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table30, "Given ");
#line hidden
#line 169
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table31.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 170
 testRunner.And("I have started the transition \'create\' for the workflow instance with Id \'instanc" +
                        "e1\' a trigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigg" +
                        "er\'", ((string)(null)), table31, "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table32.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Value1.1"});
#line 173
 testRunner.And("I have set the workflow instance Id \'instance1\' as having exited the current stat" +
                        "e with the following context updates:", ((string)(null)), table32, "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table33.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Value1.2"});
                table33.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context3",
                            "Value3"});
                table33.AddRow(new string[] {
                            "Remove",
                            "Context2",
                            ""});
#line 176
 testRunner.And("I have set the workflow instance Id \'instance1\' as having executed transition act" +
                        "ions with the following context updates:", ((string)(null)), table33, "And ");
#line hidden
#line 181
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table34.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context4",
                            "Value4.1"});
                table34.AddRow(new string[] {
                            "Remove",
                            "Context3",
                            ""});
#line 182
 testRunner.When("I set the workflow instance Id \'instance1\' as having entered the state \'waiting-f" +
                        "or-documentation\' with the following context updates:", ((string)(null)), table34, "When ");
#line hidden
#line 186
 testRunner.Then("the workflow instance with Id \'instance1\' should have 1 uncommitted event", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Property",
                            "Value"});
                table35.AddRow(new string[] {
                            "Status",
                            "Waiting"});
                table35.AddRow(new string[] {
                            "StateId",
                            "waiting-for-documentation"});
                table35.AddRow(new string[] {
                            "IsDirty",
                            "true"});
#line 187
 testRunner.And("the workflow instance with Id \'instance1\' should have the following properties:", ((string)(null)), table35, "And ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table36.AddRow(new string[] {
                            "Context1",
                            "Value1.2"});
                table36.AddRow(new string[] {
                            "Context4",
                            "Value4.1"});
#line 192
 testRunner.And("the workflow instance with Id \'instance1\' should have the following context:", ((string)(null)), table36, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot enter a new state if it is not the target state of the current transition")]
        public virtual void CannotEnterANewStateIfItIsNotTheTargetStateOfTheCurrentTransition()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot enter a new state if it is not the target state of the current transition", null, tagsOfScenario, argumentsOfScenario);
#line 197
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table37.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 198
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table37, "Given ");
#line hidden
#line 201
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table38.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 202
 testRunner.And("I have started the transition \'create\' for the workflow instance with Id \'instanc" +
                        "e1\' a trigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigg" +
                        "er\'", ((string)(null)), table38, "And ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table39.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Value1.1"});
#line 205
 testRunner.And("I have set the workflow instance Id \'instance1\' as having exited the current stat" +
                        "e with the following context updates:", ((string)(null)), table39, "And ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table40.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Value1.2"});
                table40.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context3",
                            "Value3"});
                table40.AddRow(new string[] {
                            "Remove",
                            "Context2",
                            ""});
#line 208
 testRunner.And("I have set the workflow instance Id \'instance1\' as having executed transition act" +
                        "ions with the following context updates:", ((string)(null)), table40, "And ");
#line hidden
#line 213
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 214
 testRunner.When("I set the workflow instance Id \'instance1\' as having entered the state \'published" +
                        "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 215
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 216
 testRunner.And("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot start a transition when a transition is already in progress")]
        public virtual void CannotStartATransitionWhenATransitionIsAlreadyInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot start a transition when a transition is already in progress", null, tagsOfScenario, argumentsOfScenario);
#line 218
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table41.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 219
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table41, "Given ");
#line hidden
#line 222
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'wait" +
                        "ing-for-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table42.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 223
 testRunner.And("I have started the transition \'create\' for the workflow instance with Id \'instanc" +
                        "e1\' a trigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigg" +
                        "er\'", ((string)(null)), table42, "And ");
#line hidden
#line 226
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table43.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 227
 testRunner.When("I start the transition \'create\' for the workflow instance with Id \'instance1\' a t" +
                        "rigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigger\'", ((string)(null)), table43, "When ");
#line hidden
#line 230
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 231
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot start a transition when a workflow is faulted")]
        public virtual void CannotStartATransitionWhenAWorkflowIsFaulted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot start a transition when a workflow is faulted", null, tagsOfScenario, argumentsOfScenario);
#line 233
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table44.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 234
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table44, "Given ");
#line hidden
#line 237
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
 testRunner.And("I have set the workflow instance with Id \'instance1\' as faulted with the message " +
                        "\'Intentional fault\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table45.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 240
 testRunner.When("I start the transition \'create\' for the workflow instance with Id \'instance1\' a t" +
                        "rigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigger\'", ((string)(null)), table45, "When ");
#line hidden
#line 243
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 244
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot exit a state when a transition is not in progress")]
        public virtual void CannotExitAStateWhenATransitionIsNotInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot exit a state when a transition is not in progress", null, tagsOfScenario, argumentsOfScenario);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table46.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 247
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table46, "Given ");
#line hidden
#line 250
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table47.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Updated Value1"});
#line 252
 testRunner.When("I set the workflow instance Id \'instance1\' as having exited the current state wit" +
                        "h the following context updates:", ((string)(null)), table47, "When ");
#line hidden
#line 255
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot enter a state when a transition is not in progress")]
        public virtual void CannotEnterAStateWhenATransitionIsNotInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot enter a state when a transition is not in progress", null, tagsOfScenario, argumentsOfScenario);
#line 258
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table48.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 259
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table48, "Given ");
#line hidden
#line 262
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
 testRunner.When("I set the workflow instance Id \'instance1\' as having entered the state \'waiting-f" +
                        "or-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 265
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 266
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot enter a new state prior to exiting the previous state")]
        public virtual void CannotEnterANewStatePriorToExitingThePreviousState()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot enter a new state prior to exiting the previous state", null, tagsOfScenario, argumentsOfScenario);
#line 268
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table49.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 269
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table49, "Given ");
#line hidden
#line 272
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table50.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 273
 testRunner.And("I have started the transition \'create\' for the workflow instance with Id \'instanc" +
                        "e1\' a trigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigg" +
                        "er\'", ((string)(null)), table50, "And ");
#line hidden
#line 276
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 277
 testRunner.When("I set the workflow instance Id \'instance1\' as having entered the state \'waiting-f" +
                        "or-documentation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 278
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 279
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot record transition action results when a transition is not in progress")]
        public virtual void CannotRecordTransitionActionResultsWhenATransitionIsNotInProgress()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot record transition action results when a transition is not in progress", null, tagsOfScenario, argumentsOfScenario);
#line 281
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table51.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 282
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table51, "Given ");
#line hidden
#line 285
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Operation",
                            "Key",
                            "Value"});
                table52.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context1",
                            "Value1.2"});
                table52.AddRow(new string[] {
                            "AddOrUpdate",
                            "Context3",
                            "Value3"});
                table52.AddRow(new string[] {
                            "Remove",
                            "Context2",
                            ""});
#line 287
 testRunner.When("I set the workflow instance Id \'instance1\' as having executed transition actions " +
                        "with the following context updates:", ((string)(null)), table52, "When ");
#line hidden
#line 292
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 293
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot record transition actions prior to exiting the previous state")]
        public virtual void CannotRecordTransitionActionsPriorToExitingThePreviousState()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot record transition actions prior to exiting the previous state", null, tagsOfScenario, argumentsOfScenario);
#line 295
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstanceId",
                            "WorkflowId",
                            "Context"});
                table53.AddRow(new string[] {
                            "instance1",
                            "workflow1",
                            "{Context1}"});
#line 296
 testRunner.Given("I have created a new workflow instance", ((string)(null)), table53, "Given ");
#line hidden
#line 299
 testRunner.And("I have set the workflow instance Id \'instance1\' as having entered the state \'init" +
                        "ializing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropertyName",
                            "Value"});
                table54.AddRow(new string[] {
                            "CatalogItemId",
                            "id1"});
#line 300
 testRunner.And("I have started the transition \'create\' for the workflow instance with Id \'instanc" +
                        "e1\' a trigger of type \'application/vnd.endjin.datacatalog.createcatalogitemtrigg" +
                        "er\'", ((string)(null)), table54, "And ");
#line hidden
#line 303
 testRunner.And("I have persisted the workflow instance with Id \'instance1\' to storage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 304
 testRunner.When("I set the workflow instance Id \'instance1\' as having executed transition actions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 305
 testRunner.Then("an \'InvalidOperationException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 306
 testRunner.Then("the workflow instance with Id \'instance1\' should have 0 uncommitted events", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
