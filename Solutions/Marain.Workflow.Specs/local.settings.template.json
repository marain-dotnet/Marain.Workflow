{
  "LeasingStorageAccountConnectionString": "UseDevelopmentStorage=true",

  // If using a real Cosmos account, provide the details using these settings. To use the emulator, omit the settings
  // completely.
  "TestCosmosConfiguration:AccountUri": "https://endjintestsql.documents.azure.com/",
  "TestCosmosConfiguration:AccountKeySecretName": "endjintestsql",
  "TestCosmosConfiguration:KeyVaultName": "endjintest",
  "TestCosmosConfiguration:DisableTenantIdPrefix": "true",

  // If using a real SQL database, provide the details using these settings. To use the emulator, omit the settings
  // completely.
  "TestSqlConfiguration:Database": "endjintestsql",
  "TestSqlConfiguration:ConnectionStringSecretName": "endjintestazuresql",
  "TestSqlConfiguration:KeyVaultName": "endjintest",

  // If using a real storage account, provide the details using these settings. To use the emulator, omit the settings
  // completely.
  "TestStorageConfiguration:AccountName": "endteststorage",
  "TestStorageConfiguration:Container": "workflow",
  "TestStorageConfiguration:KeyVaultName": "endjintest",
  "TestStorageConfiguration:AccountKeySecretName": "endteststorage"

  // If using a real Cosmos or Sql configuration that requires KeyVault access, this local service will need to authenticate.
  // And for that to work, you won't be able to use the normal az cli-based AzureServicesAuthConnectionString
  // (because az cli is only able to obtain tokens for a fixed set of known Microsoft resource; it can't be
  // used to obtain tokens for arbitrary applications that we've defined). Instead, you'll need to create
  // a suitable service principle in AAD, grant that service principle access to the tenancy service, and
  // set up the credentials like this instead of the setting above:
  //  "AzureServicesAuthConnectionString": "RunAs=App;AppId=AppIdForYourServicePrinciple;TenantId=0f621c67-98a0-4ed5-b5bd-31a35be41e29;AppKey=YourAppSecretHere"
}