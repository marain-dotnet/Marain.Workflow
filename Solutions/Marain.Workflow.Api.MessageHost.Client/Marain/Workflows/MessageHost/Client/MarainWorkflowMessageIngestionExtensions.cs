// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Workflows.MessageHost.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MarainWorkflowMessageIngestion.
    /// </summary>
    public static partial class MarainWorkflowMessageIngestionExtensions
    {
            /// <summary>
            /// Send a new trigger into the workflow engine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// New trigger to be processed by the engine
            /// </param>
            public static SendTriggerHeaders SendTrigger(this IMarainWorkflowMessageIngestion operations, string tenantId, Trigger body)
            {
                return operations.SendTriggerAsync(tenantId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a new trigger into the workflow engine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// New trigger to be processed by the engine
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SendTriggerHeaders> SendTriggerAsync(this IMarainWorkflowMessageIngestion operations, string tenantId, Trigger body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendTriggerWithHttpMessagesAsync(tenantId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Send a request to start a new workflow instance into the workflow engine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// Details of the new workflow instance to be started
            /// </param>
            public static SendStartNewWorkflowInstanceRequestHeaders SendStartNewWorkflowInstanceRequest(this IMarainWorkflowMessageIngestion operations, string tenantId, StartNewWorkflowInstanceRequest body)
            {
                return operations.SendStartNewWorkflowInstanceRequestAsync(tenantId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send a request to start a new workflow instance into the workflow engine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant within which the request should operate
            /// </param>
            /// <param name='body'>
            /// Details of the new workflow instance to be started
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SendStartNewWorkflowInstanceRequestHeaders> SendStartNewWorkflowInstanceRequestAsync(this IMarainWorkflowMessageIngestion operations, string tenantId, StartNewWorkflowInstanceRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendStartNewWorkflowInstanceRequestWithHttpMessagesAsync(tenantId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// View swagger definition for this API
            /// </summary>
            /// <remarks>
            /// View swagger definition for this API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetSwagger(this IMarainWorkflowMessageIngestion operations)
            {
                return operations.GetSwaggerAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// View swagger definition for this API
            /// </summary>
            /// <remarks>
            /// View swagger definition for this API
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSwaggerAsync(this IMarainWorkflowMessageIngestion operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSwaggerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
