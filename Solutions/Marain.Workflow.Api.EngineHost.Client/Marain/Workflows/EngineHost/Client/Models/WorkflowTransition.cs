// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Workflows.EngineHost.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class WorkflowTransition
    {
        /// <summary>
        /// Initializes a new instance of the WorkflowTransition class.
        /// </summary>
        public WorkflowTransition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkflowTransition class.
        /// </summary>
        public WorkflowTransition(string id, string contentType, string targetStateId, string description = default(string), string displayName = default(string), IList<WorkflowAction> actions = default(IList<WorkflowAction>), IList<WorkflowCondition> conditions = default(IList<WorkflowCondition>))
        {
            Id = id;
            ContentType = contentType;
            Description = description;
            DisplayName = displayName;
            TargetStateId = targetStateId;
            Actions = actions;
            Conditions = conditions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "targetStateId")]
        public string TargetStateId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "actions")]
        public IList<WorkflowAction> Actions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<WorkflowCondition> Conditions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (ContentType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentType");
            }
            if (TargetStateId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetStateId");
            }
            if (Actions != null)
            {
                foreach (var element in Actions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Conditions != null)
            {
                foreach (var element1 in Conditions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
