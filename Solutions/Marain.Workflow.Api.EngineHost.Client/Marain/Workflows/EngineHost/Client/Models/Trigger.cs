// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Workflows.EngineHost.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Trigger
    {
        /// <summary>
        /// Initializes a new instance of the Trigger class.
        /// </summary>
        public Trigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Trigger class.
        /// </summary>
        /// <param name="triggerName">The name of the trigger. This will
        /// correspond to internal conditions and used to determine which
        /// transitons this trigger can select.</param>
        /// <param name="id">Unique Id for this trigger. The Id will be used
        /// internally to trace the path of the trigger through the workflow
        /// engine and can be used to retrieve the status of the trigger. If
        /// omitted, a trigger Id will be generated by the server.</param>
        /// <param name="subjects">A list of Ids that can be used when
        /// retrieving workflow instances that may need to process this
        /// trigger. If left blank, all Waiting workflow instances will try to
        /// process the trigger, so it is strongly recommended that you always
        /// supply a value. If possible, use the Id of the specific workflow
        /// instance that you want to process the trigger.</param>
        /// <param name="parameters">Parameters for this trigger. This will be
        /// processed on the server as a list of key/value pairs - complex
        /// objects should not be used.</param>
        public Trigger(string triggerName, string id = default(string), IList<string> subjects = default(IList<string>), IDictionary<string, string> parameters = default(IDictionary<string, string>))
        {
            Id = id;
            TriggerName = triggerName;
            Subjects = subjects;
            Parameters = parameters;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for Trigger class.
        /// </summary>
        static Trigger()
        {
            ContentType = "application/vnd.marain.workflows.hosted.trigger";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique Id for this trigger. The Id will be used
        /// internally to trace the path of the trigger through the workflow
        /// engine and can be used to retrieve the status of the trigger. If
        /// omitted, a trigger Id will be generated by the server.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the trigger. This will correspond to
        /// internal conditions and used to determine which transitons this
        /// trigger can select.
        /// </summary>
        [JsonProperty(PropertyName = "triggerName")]
        public string TriggerName { get; set; }

        /// <summary>
        /// Gets or sets a list of Ids that can be used when retrieving
        /// workflow instances that may need to process this trigger. If left
        /// blank, all Waiting workflow instances will try to process the
        /// trigger, so it is strongly recommended that you always supply a
        /// value. If possible, use the Id of the specific workflow instance
        /// that you want to process the trigger.
        /// </summary>
        [JsonProperty(PropertyName = "subjects")]
        public IList<string> Subjects { get; set; }

        /// <summary>
        /// Gets or sets parameters for this trigger. This will be processed on
        /// the server as a list of key/value pairs - complex objects should
        /// not be used.
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IDictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public static string ContentType { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TriggerName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TriggerName");
            }
        }
    }
}
