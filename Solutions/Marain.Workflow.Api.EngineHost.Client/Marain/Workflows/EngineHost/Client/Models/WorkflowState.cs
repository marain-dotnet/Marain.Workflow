// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Workflows.EngineHost.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class WorkflowState
    {
        /// <summary>
        /// Initializes a new instance of the WorkflowState class.
        /// </summary>
        public WorkflowState()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkflowState class.
        /// </summary>
        public WorkflowState(string id, string contentType, string description = default(string), string displayName = default(string), IList<WorkflowAction> entryActions = default(IList<WorkflowAction>), IList<WorkflowCondition> entryConditions = default(IList<WorkflowCondition>), IList<WorkflowAction> exitActions = default(IList<WorkflowAction>), IList<WorkflowCondition> exitConditions = default(IList<WorkflowCondition>), IList<WorkflowTransition> transitions = default(IList<WorkflowTransition>))
        {
            Id = id;
            ContentType = contentType;
            Description = description;
            DisplayName = displayName;
            EntryActions = entryActions;
            EntryConditions = entryConditions;
            ExitActions = exitActions;
            ExitConditions = exitConditions;
            Transitions = transitions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entryActions")]
        public IList<WorkflowAction> EntryActions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "entryConditions")]
        public IList<WorkflowCondition> EntryConditions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exitActions")]
        public IList<WorkflowAction> ExitActions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exitConditions")]
        public IList<WorkflowCondition> ExitConditions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transitions")]
        public IList<WorkflowTransition> Transitions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (ContentType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentType");
            }
            if (EntryActions != null)
            {
                foreach (var element in EntryActions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (EntryConditions != null)
            {
                foreach (var element1 in EntryConditions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (ExitActions != null)
            {
                foreach (var element2 in ExitActions)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (ExitConditions != null)
            {
                foreach (var element3 in ExitConditions)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (Transitions != null)
            {
                foreach (var element4 in Transitions)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
        }
    }
}
